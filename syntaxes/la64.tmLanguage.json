{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "la64",
	"patterns": [
		{
			"include": "#keywordsBase"
		}
	],
	"repository": {
		"keywordsBase": {
			"patterns": [
				{
					"include": "#Base_reg"
				},
				{
					"include": "#Bitwise_Op"
				},
				{
					"include": "#Shift_Op"
				},
				{
					"include": "#Arithmetic_Op"
				},
				{
					"include": "#Jump_Op"
				},
				{
					"include": "#Regular_Memory_Access_Op"
				},
				{
					"include": "#Bounds_Checking_Memory_Access_Op"
				},
				{
					"include": "#Atomic_Memory_Access"
				},
				{
					"include": "#Barrier_Op"
				},
				{
					"include": "#CRC_Checksum_Op"
				},
				{
					"include": "#Other_Misc_Op"
				},
				{
					"include": "#Float_Reg"
				},
				{
					"include": "#Float_Arithmetic_Op"
				},
				{
					"include": "#Float_Comp_Op"
				},
				{
					"include": "#Float_Conversion_Op"
				},
				{
					"include": "#Float_Mov_Op"
				},
				{
					"include": "#Float_Mem_Op"
				},
				{
					"include": "#Float_Bounds_Checking_Mem_Op"
				},
				{
					"include": "#LASX_Reg"
				},
				{
					"include": "#LSX_Reg"
				},
				{
					"include": "#Vector_Integer_Arithmetic_Op"
				},
				{
					"include": "#Vector_Bitwise_Op"
				},
				{
					"include": "#Vector_String_Process_Op"
				},
				{
					"include": "#Vector_Float_Arithmetic_Op"
				},
				{
					"include": "#Vector_Float_Conversion_Op"
				},
				{
					"include": "#Vector_Comparison_Op"
				},
				{
					"include": "#Vector_Shuffle_and_Move_Op"
				},
				{
					"include": "#Vector_Mem_Op"
				},
				{
					"include":"#Macro_Op"
				}
			]
		},

		"Base_reg" : {
			"patterns": [
				{
					"name": "string.regexp.la64",
					"match": "(\\$)?r([0-9]|[1-2][0-9]|3[0-1])\\b|(\\$)?(zero|ra|tp|sp|fp)\\b|(\\$)?a[0-7]\\b|\\bt[0-8]\\b|\\$t[0-8]\\b|\\bs[0-8]\\b|\\$s[0-8]\\b"
				}
			]
		},
		"Arithmetic_Op" : {
			"patterns": [
				{
					"name": "invalid.illegal.la64",
					"match": "\\b((add|sub|addi|alsl|mul|mulh|div|mod)\\.(w|d))\\b|\\b(addu16i|lu52i|lu32i)\\.d\\b|\\balsl.wu\\b|\\blu12i\\.w\\b|\\b(slt|sltu|slti|sltui|pcaddi|pcaddu12i|pcaddu18i|pcalau12i|and|or|nor|xor|andn|orn|andi|ori|xori)\\b|\\b(mulh|div|mod)\\.(wu|du)\\b|\\bmulw\\.d\\.(w|wu)\\b|\\bnop\\b"
				}
			]
		},

		"Shift_Op" : {
			"patterns": [
				{
					"name": "invalid.illegal.la64",
					"match": "\\b(sll|srl|sra|rotr|slli|srli|srai|rotri)\\.(w|d)\\b"
				}
			]
		},

		"Bitwise_Op" : {
			"patterns": [
				{
					"name": "invalid.illegal.la64",
					"match": "\\bext\\.w\\.(b|h)\\b|\\b(clo|clz|cto|ctz|bitrev|bstrins|bstrpick)\\.(w|d)\\b|\\bbytepick\\.(w|d)\\b|\\brevb\\.(2h|4h|2w|d)\\b|\\brevh\\.(2w|d)\\b|\\bbitrev\\.(4b|8b)\\b|\\b(maskeqz|masknez)\\b"
				}
			]
		},

		"Jump_Op" : {
			"patterns": [
				{
					"name": "invalid.illegal.la64",
					"match": "\\b(beq|bne|blt|bge|bltu|bgeu|beqz|bnez|b|bl|jirl)\\b"
				}
			]
		},

		"Regular_Memory_Access_Op" :{
			"patterns": [
				{
					"name": "invalid.illegal.la64",
					"match": "\\b(ld|st|ldx|stx)\\.(b|h|w|d)\\b|\\b(st|ldx)\\.(bu|hu|wu)\\b|\\b(ldptr|stptr)\\.(w|d)\\b|\\b(preld|preldx)\\b"
				}
			]
		},

		"Bounds_Checking_Memory_Access_Op" :{
			"patterns": [
				{
					"name": "invalid.illegal.la64",
					"match": "\\b(ld|st)(gt|le)\\.(b|h|w|d)\\b"
				}
			]
		},

		"Atomic_Memory_Access" :{
			"patterns": [
				{
					"name": "invalid.illegal.la64",
					"match": "\\bam(swap|add|and|or|xor|max|min)\\.(w|d)\\b|\\bam(swap|add|and|or|xor|max|min)_db\\.(w|d)\\b|\\bam(max|min)\\.(wu|du)\\b|\\bam(max|min)_db\\.(wu|du)\\b|\\bam(swap|add)\\.(b|h)\\b|\\bam(swap|add)_db\\.(b|h)\\b|\\bamcas\\.(b|h|w|d)\\b|\\bamcas_db\\.(b|h|w|d)\\b|\\b(ll|sc)\\.(w|d)\\b|\\bsc\\.q\\b|\\bll\\.acq\\.(w|d)\\b|\\bsc\\.rel\\.(w|d)\\b"
				}
			]
		},

		"Barrier_Op":{
			"patterns": [
				{
					"name": "invalid.illegal.la64",
					"match": "\\b(dbar|ibar)\\b"
				}
			]
		},

		"CRC_Checksum_Op":{
			"patterns": [
				{
					"name": "invalid.illegal.la64",
					"match": "\\b(crc|crcc)\\.w\\.(b|h|w|d)\\.w\\b"
				}
			]
		},

		"Other_Misc_Op" :{
			"patterns": [
				{
					"name": "invalid.illegal.la64",
					"match": "\\b(syscall|break|cpucfg)\\b|\\basrt(le|gt)\\.d\\b|\\brdtime(l|h)\\.w\\b|\\brdtime\\.d\\b"
				}
			]
		},

		"Float_Reg":{
			"patterns": [
				{
					"name": "string.html.la64",
					"match": "(\\$)?f([0-9]|[1-2][0-9]|3[0-1])\\b|(\\$)?fa[0-7]\\b|(\\$)?ft[0-15]\\b|(\\$)?fs[0-7]\\b|(\\$)?fcc[0-7]\\b"
				}
			]
		},

		"Float_Arithmetic_Op":{
			"patterns": [
				{
					"name": "invalid.la64",
					"match": "\\bf(add|sub|mul|div|madd|msub|nmadd|nmsub|max|min|maxa|mina|abs|neg|sqrt|recip|rsqrt|scaleb|logb|copysign|class|recipe|rsqrte)\\.(s|d)\\b"
				}
			]
		},

		"Float_Comp_Op":{
			"patterns": [
				{
					"name":"invalid.la64",
					"match": "\\bfcmp\\.(caf|cun|ceq|cueq|clt|cult|cle|cule|cne|cor|cune|saf|sun|seq|sueq|slt|sult|sle|sule|sne|sor|sune)\\.(s|d)\\b"
				}
			]
		},

		"Float_Conversion_Op":{
			"patterns": [
				{
					"name":"invalid.la64",
					"match": "\\bfcvt\\.s\\.d\\b|\\bfcvt\\.d\\.s\\b|\\bffint\\.(s|d)\\.(w/l)\\b|\\bftint\\.(w|l)\\.(s|d)\\b|\\bftint(rm|rp|rz|rne)\\.(w|l)\\.(s|d)\\b|\\bfrint\\.(s|d)\\b"
				}
			]
		},

		"Float_Mov_Op":{
			"patterns": [
				{
					"name":"invalid.la64",
					"match": "\\bfmov.(s|d)\\b|\\bfsel\\b|\\bmovgr2fr\\.(w|d)\\b|\\bmovegr2frh\\.w\\b|\\bmovefr2gr\\.(s|d)\\b|\\bmovefrh2gr.s\\b|\\b(movegr2fcsr|movfcsr2gr|movfr2cf|movcf2fr|movgr2cf|movcf2gr)\\b"
				}
			]
		},

		"Float_Branch_Op":{
			"patterns": [
				{
					"name":"invalid.la64",
					"match": "\\b(bceqz|bcnez)\\b"
				}
			]
		},

		"Float_Mem_Op":{
			"patterns": [
				{
					"name":"invalid.la64",
					"match": "\\b(fld|fst|fldx|fstx)\\.(s|d)\\b"
				}
			]
		},
		"Float_Bounds_Checking_Mem_Op":{
			"patterns": [
				{
					"name":"invalid.la64",
					"match": "\\b(fld|fst)(gt|le)\\.(s|d)\\b"
				}
			]
		},

		"LASX_Reg":{
			"patterns": [
				{
					"name": "string.html.la64",
					"match": "(\\$)?xr([0-9]|[1-2][0-9]|3[0-1])\\b"
				}
			]
		},

		"LSX_Reg":{
			"patterns": [
				{
					"name": "string.html.la64",
					"match": "(\\$)?vr([0-9]|[1-2][0-9]|3[0-1])\\b"
				}
			]
		},

		"Vector_Integer_Arithmetic_Op":{
			"patterns": [
				{
					"name": "constant.character.la64",
					"match": "\\bx?v(add|sub)\\.(b|h|w|d|q)\\b|\\bx?v(addi|subi)\\.(b|h|w|d)u\\b|\\bx?vneg\\.(b|h|w|d)\\b|\\bx?v(sadd|ssub)\\.(b|h|w|d)u?\\b|\\bx?v(haddw|hsubw)\\.(hu?\\.bu?|wu?\\.hu?|du?\\.w?|qu?\\.du?)\\b|\\bx?v(addw|subw)(ev|od)\\.(h\\.bu?|w\\.hu?|d\\.wu?|q\\.du?)\\b|\\bx?vaddw(ev|od)\\.(h\\.bu\\.b|w\\.hu\\.h|d\\.hu\\.h|q\\.du\\.d)\\b|\\bx?vavgr?\\.(b|h|w|d)u?\\b|\\bx?vabs\\.(b|h|w|u)u?\\b|\\bx?vmul\\.(b|h|w|d)\\b|\\bx?vmuh\\.(b|h|w|d)u?\\b|\\bx?vmulw(ev|od)\\.(h\\.b|w\\.h|d\\.w|q\\.d)u?\\b|\\bx?vmulw(ev|od)\\.(h\\.bu\\.b|w\\.hu\\.h|d\\.hu\\.h|q\\.du\\.d)\\b|\\bx?v(madd|msub)\\.(b|h|w|d)\\b|\\bx?vmaddw(ev|od)\\.(h\\.b|w\\.h|d\\.w|q\\.d)u?\\b|\\bx?vmaddw(ev|od)\\.(h\\.bu\\.b|w\\.hu\\.h|d\\.hu\\.h|q\\.du\\.d)\\b|\\bx?v(div|mod|sat)\\.(b|h|w|d)u?\\b|\\bx?vexth\\.(hu?\\.bu?|wu?\\.hu?|du?\\.wu?|qu?\\.du?)\\b|\\bvext2xv\\.(h|w|d)\\.b\\b|\\bvext2xv\\.(hu|wu|du)\\.bu|\\bvext2xv\\.(w|d)\\.h\\b|\\bvext2xv\\.(wu|du)\\.hu\\b|\\bvext2xv\\.d\\.w\\b|\\bvext2xv\\.du\\.wu\\b|\\bx?v(signcov|mskltz)\\.(b|h|w|d)\\b|\\bx?vmsk(gen|nz)\\.b\\b|\\bx?vldi\\b"
				}
			]
		},

		"Vector_Bitwise_Op":{
			"patterns": [
				{
					"name":"constant.character.la64",
					"match": "\\bx?v(and|or|xor|nor|andn|orn)\\.v\\b|\\bx?v(andi|ori|xori|nori)\\.b\\b|\\bx?v(slli?|srli?|srai?|totri?)\\.(b|h|w|d)\\b|\\bx?vsllwil\\.(h\\.b|w\\.h|\\d\\.w)\\b|\\bx?vextl\\.q\\.d\\b|\\bx?vsllwil\\.(hu\\.bu|wu\\.hu|\\du\\.wu)\\b|\\bx?vextl\\.qu\\.du\\b|\\bx?v(srlri?|srari?)\\.(b|h|w|d)\\b|\\bx?v(srln|sran)\\.(b\\.h|h\\.w|w\\.d)\\b|\\bx?v(srlni|srani)\\.(b\\.h|h\\.w|w\\.d|d\\.q)|\\bx?v(srlrn|srarn|ssrln|ssran|ssrlrn|ssrarn)\\.(b\\.h|h\\.w|w\\.d)\\b|\\bx?v(srlrni|srarni|ssrlni|ssrani|ssrlrni|ssrarni)\\.(b\\.h|h\\.w|w\\.d|d\\.q)|\\bx?v(ssrln|ssran|ssrlrn|ssrarn)\\.(bu\\.h|hu\\.w|wu\\.d)\\b|\\bx?v(ssrlni|ssrani|ssrlrni|ssrarni)\\.(bu\\.h|hu\\.w|wu\\.d|du\\.q)|\\bx?v(clo|clz|pcnt|bitclri?|bitseti?|bitrevi?)\\.(b|h|w|d)\\b"

				}
			]
		},

		"Vector_String_Process_Op":{
			"patterns": [
				{
					"name":"constant.character.la64",
					"match": "\\bx?vfrstpi?\\.(b|h)\\b"
				}
			]
		},

		"Vector_Float_Arithmetic_Op":{
			"patterns": [
				{
					"name":"constant.character.la64",
					"match": "\\bx?vf(add|sub|mul|div|madd|msub|nmadd|nmsub|max|min|maxa|mina|logb|class|sqrt|recip|rsqrt)\\.(s|d)\\b"
				}
			]
		},

		"Vector_Float_Conversion_Op":{
			"patterns": [
				{
					"name":"constant.character.la64",
					"match": "\\bx?fcvt(l|h)\\.(s\\.h|d\\.s)\\b|\\bx?vfcvt\\.(h\\.s|s\\.d)\\b|\\bx?vfrint(rne|rz|rp|rm)\\.(s|d)\\b|\\bx?vftint(rne|rz|rp|rm)\\.(w\\.s|l\\.d|w\\.d)\\b|\\bx?vftint(rz)?\\.(wu\\.s|lu\\.d)\\b|\\bx?vftint(rne|rz|rp|rm)(l|h)\\.l\\.s\\b|\\bx?vffint\\.(s\\.w|d\\.l)u?\\b|\\bx?vffint\\.s\\.l\\b|\\bx?vffint(l|h)\\.d\\.w\\b"
				}
			]
		},

		"Vector_Comparison_Op":{
			"patterns": [
				{
					"name":"constant.character.la64",
					"match": "\\bx?vseqi?\\.(b|h|w|d)\\b|\\bx?v(sle|slt)i?\\.(b|h|w|d)u?\\b|\\bx?vfcmp\\.(caf|cun|ceq|cueq|clt|cult|cle|cule|cne|cor|cune|saf|sun|seq|sueq|slt|sult|sle|sule|sne|sor|sune)\\.(s|d)\\b|\\bx?vbitsel\\.v\\b|\\bx?vbitseli\\.b\\b|\\bx?vset(eqz|nez)\\.v\\b|\\bx?v(setanyeqz|setallnez)\\.(b|h|w|d)\\b"
				}
			]
		},

		"Vector_Shuffle_and_Move_Op":{
			"patterns": [
				{
					"name":"constant.character.la64",
					"match": "\\bvinsgr2vr\\.(b|h|w|d)\\b|\\bxvinsgr2vr\\.(w|d)\\b|vpickve2gr\\.(b|h|w|d)u?\\b|\\bxvpickve2gr\\.(w|d)u?\\b|\\bx?v(replgr2vr|replve)\\,(b|h|w|d)\\b|\\b(vreplvei|xvrepl128vei)\\.(b|h|w|d)\\b|\\bxvreplve0\\.(b|h|w|d|q)\\b|\\b(xvinsve0|xvpickve)\\.(w|d)\\b|\\bx?v(bsll|bsrl)\\.v\\b|\\bx?v(pack|pick)(ev|od)\\.(b|h|w|d)\\b|\\bx?vilv(l|h)\\.(b|h|w|d)\\b|\\bx?vshuf\\.b\\b|\\bx?v(shuf|shuf4i|extrins)\\.(b|h|w|d)\\b|\\bxvperm\\.w\\b|\\bvpermi\\.w\\b|\\bxvpermi\\.(w|d|q)\\b"
				}
			]
		},

		"Vector_Mem_Op":{
			"patterns": [
				{
					"name":"constant.character.la64",
					"match": "\\bx?v(ld|st)x?\\b|\\bx?v(ldrepl|stelm)\\.(b|h|w|d)\\b"
				}
			]
		},

		"Macro_Op":{
			"patterns": [
				{
					"name":"constant.character.la64",
					"match":"\\bG(LD|LD_INC|LDX|LDREPL|ST|MUL|MADD|ADD|ADDI|SUB|SLLI|INSVE0|XOR|PERMI|NMSUB|PRELD|ACC|MOV|COMPLEXACC|GCOMPLEXMUL|GCOMPLEXMADD|SBUTTERFLY|TRANSPOSE8x8_W|TRANSPOSE4x4_D|INTERLACE)\\b|\\bREG_(SIZE|LOG)\\b|\\bPTR_(LOG|ADDI|ADD|SUB|LD|ST|SLLI|SRLI|ALSL)\\b|\\bFREG_(SIZE|LOG)\\b|\\bPTR_(FLD|FST)\\b"
				}
			]
		}
	},
	"scopeName": "source.S"
}