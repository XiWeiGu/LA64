{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "la64",
	"patterns": [
		{
			"include": "#keywordsBase"
		}
	],
	"repository": {
		"keywordsBase": {
			"patterns": [
				{
					"include": "#Base_reg"
				},
				{
					"include": "#Bitwise_Op"
				},
				{
					"include": "#Shift_Op"
				},
				{
					"include": "#Arithmetic_Op"
				},
				{
					"include": "#Jump_Op"
				},
				{
					"include": "#Regular_Memory_Access_Op"
				},
				{
					"include": "#Bounds_Checking_Memory_Access_Op"
				},
				{
					"include": "#Atomic_Memory_Access"
				},
				{
					"include": "#Barrier_Op"
				},
				{
					"include": "#CRC_Checksum_Op"
				},
				{
					"include": "#Other_Misc_Op"
				},
				{
					"include": "#Float_Reg"
				},
				{
					"include": "#Float_Arithmetic_Op"
				},
				{
					"include": "#Float_Comp_Op"
				},
				{
					"include": "#Float_Conversion_Op"
				},
				{
					"include": "#Float_Mov_Op"
				},
				{
					"include": "#Float_Mem_Op"
				},
				{
					"include": "#Float_Bounds_Checking_Mem_Op"
				}
			]
		},

		"Base_reg" : {
			"patterns": [
				{
					"name": "string.regexp.la64",
					"match": "\\$(r)(?:[12]?[0-9]|30)"
				}
			]
		},
		"Arithmetic_Op" : {
			"patterns": [
				{
					"name": "invalid.illegal.la64",
					"match": "\\b((add|sub|addi|alsl|mul|mulh|div|mod)\\.(w|d))\\b|\\b(addu16i|lu52i|lu32i)\\.d\\b|\\balsl.wu\\b|\\blu12i\\.w\\b|\\b(slt|sltu|slti|sltui|pcaddi|pcaddu12i|pcaddu18i|pcalau12i|and|or|nor|xor|andn|orn|andi|ori|xori)\\b|\\b(mulh|div|mod)\\.(wu|du)\\b|\\bmulw\\.d\\.(w|wu)\\b|\\bnop\\b"
				}
			]
		},

		"Shift_Op" : {
			"patterns": [
				{
					"name": "invalid.illegal.la64",
					"match": "\\b(sll|srl|sra|rotr|slli|srli|srai|rotri)\\.(w|d)\\b"
				}
			]
		},

		"Bitwise_Op" : {
			"patterns": [
				{
					"name": "invalid.illegal.la64",
					"match": "\\bext\\.w\\.(b|h)\\b|\\b(clo|clz|cto|ctz|bitrev|bstrins|bstrpick)\\.(w|d)\\b|\\bbytepick\\.(w|d)\\b|\\brevb\\.(2h|4h|2w|d)\\b|\\brevh\\.(2w|d)\\b|\\bbitrev\\.(4b|8b)\\b|\\b(maskeqz|masknez)\\b"
				}
			]
		},

		"Jump_Op" : {
			"patterns": [
				{
					"name": "invalid.illegal.la64",
					"match": "\\b(beq|bne|blt|bge|bltu|bgeu|beqz|bnez|b|bl|jirl)\\b"
				}
			]
		},

		"Regular_Memory_Access_Op" :{
			"patterns": [
				{
					"name": "invalid.illegal.la64",
					"match": "\\b(ld|st|ldx|stx)\\.(b|h|w|d)\\b|\\b(st|ldx)\\.(bu|hu|wu)\\b|\\b(ldptr|stptr)\\.(w|d)\\b|\\b(preld|preldx)\\b"
				}
			]
		},

		"Bounds_Checking_Memory_Access_Op" :{
			"patterns": [
				{
					"name": "invalid.illegal.la64",
					"match": "\\b(ld|st)(gt|le)\\.(b|h|w|d)\\b"
				}
			]
		},

		"Atomic_Memory_Access" :{
			"patterns": [
				{
					"name": "invalid.illegal.la64",
					"match": "\\bam(swap|add|and|or|xor|max|min)\\.(w|d)\\b|\\bam(swap|add|and|or|xor|max|min)_db\\.(w|d)\\b|\\bam(max|min)\\.(wu|du)\\b|\\bam(max|min)_db\\.(wu|du)\\b|\\bam(swap|add)\\.(b|h)\\b|\\bam(swap|add)_db\\.(b|h)\\b|\\bamcas\\.(b|h|w|d)\\b|\\bamcas_db\\.(b|h|w|d)\\b|\\b(ll|sc)\\.(w|d)\\b|\\bsc\\.q\\b|\\bll\\.acq\\.(w|d)\\b|\\bsc\\.rel\\.(w|d)\\b"
				}
			]
		},

		"Barrier_Op":{
			"patterns": [
				{
					"name": "invalid.illegal.la64",
					"match": "\\b(dbar|ibar)\\b"
				}
			]
		},

		"CRC_Checksum_Op":{
			"patterns": [
				{
					"name": "invalid.illegal.la64",
					"match": "\\b(crc|crcc)\\.w\\.(b|h|w|d)\\.w\\b"
				}
			]
		},

		"Other_Misc_Op" :{
			"patterns": [
				{
					"name": "invalid.illegal.la64",
					"match": "\\b(syscall|break|cpucfg)\\b|\\basrt(le|gt)\\.d\\b|\\brdtime(l|h)\\.w\\b|\\brdtime\\.d\\b"
				}
			]
		},

		"Float_Reg":{
			"patterns": [
				{
					"name": "string.html.la64",
					"match": "\\$?f[123]?[0-9]"
				}
			]
		},

		"Float_Arithmetic_Op":{
			"patterns": [
				{
					"name": "support.class.la64",
					"match": "\\bf(add|sub|mul|div|madd|msub|nmadd|nmsub|max|min|maxa|mina|abs|neg|sqrt|recip|rsqrt|scaleb|logb|copysign|class|recipe|rsqrte)\\.(s|d)\\b"
				}
			]
		},

		"Float_Comp_Op":{
			"patterns": [
				{
					"name":"support.class.la64",
					"match": "\\bfcmp\\.(caf|cun|ceq|cueq|clt|cult|cle|cule|cne|cor|cune|saf|sun|seq|sueq|slt|sult|sle|sule|sne|sor|sune)\\.(s|d)\\b"
				}
			]
		},

		"Float_Conversion_Op":{
			"patterns": [
				{
					"name":"support.class.la64",
					"match": "\\bfcvt\\.s\\.d\\b|\\bfcvt\\.d\\.s\\b|\\bffint\\.(s|d)\\.(w/l)\\b|\\bftint\\.(w|l)\\.(s|d)\\b|\\bftint(rm|rp|rz|rne)\\.(w|l)\\.(s|d)\\b|\\bfrint\\.(s|d)\\b"
				}
			]
		},

		"Float_Mov_Op":{
			"patterns": [
				{
					"name":"support.class.la64",
					"match": "\\bfmov.(s|d)\\b|\\bfsel\\b|\\bmovgr2fr\\.(w|d)\\b|\\bmovegr2frh\\.w\\b|\\bmovefr2gr\\.(s|d)\\b|\\bmovefrh2gr.s\\b|\\b(movegr2fcsr|movfcsr2gr|movfr2cf|movcf2fr|movgr2cf|movcf2gr)\\b"
				}
			]
		},

		"Float_Branch_Op":{
			"patterns": [
				{
					"name":"support.class.la64",
					"match": "\\b(bceqz|bcnez)\\b"
				}
			]
		},

		"Float_Mem_Op":{
			"patterns": [
				{
					"name":"support.class.la64",
					"match": "\\b(fld|fst|fldx|fstx)\\.(s|d)\\b"
				}
			]
		},
		"Float_Bounds_Checking_Mem_Op":{
			"patterns": [
				{
					"name":"support.class.la64",
					"match": "\\b(fld|fst)(gt|le)\\.(s|d)\\b"
				}
			]
		}
	},
	"scopeName": "source.S"
}